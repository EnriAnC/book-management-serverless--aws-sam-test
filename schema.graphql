type Query {
  getAuthor(authorId: ID!): Author
  getBook(bookId: ID!): Book
  getGenre(genreId: ID!): Genre
  getAuthorAndBooks(authorId: ID!): [Book]
  listAuthors: [Author]
  listBooks: [Book]
  listGenres: [Genre]
}
type Mutation {
  putAuthor(authorId: ID!, input: AuthorInput!): MutationResponse
  deleteAuthors(authorIds: [ID]!): MutationResponse
  saveBook(bookId: ID!, input: BookInput!): MutationResponse
  putBook(bookId: ID!, input: BookInput!): MutationResponse
  deleteBooks(bookIds: [ID]!): MutationResponse
  putGenre(genreId: ID!, input: GenreInput!): MutationResponse
  deleteGenres(genreIds: [ID]!): MutationResponse

  deleteGenreBookRelations(input: [GenreBookRelationInput]!): MutationResponse
  createGenreBookRelations(input: [GenreBookRelationInput]!): MutationResponse
  rewriteGenreBookRelations(input: [GenreBookRelationInput]!): MutationResponse
}
type MutationResponse {
  statusCode: Int!
  message: String!
}
type Author {
  authorId: ID
  firstName: String
  lastName: String
  dateOfBirth: String
  rut: String
}
type Book {
  bookId: ID
  title: String
  publicationDate: String
  authorId: String
  genreIds: [String]
}
type Genre {
  genreId: ID
  name: String
}
type BooksGender {
  genreId: ID
  name: String
  books: [Book]
}
input AuthorInput {
  firstName: String
  lastName: String
  dateOfBirth: String
  rut: String
}
input BookInput {
  title: String
  publicationDate: String
  authorId: ID
  genreIds: [ID]
}
input GenreInput {
  name: String
}
input GenreBookRelationInput {
  genreIds: [ID]
  bookId: ID
}